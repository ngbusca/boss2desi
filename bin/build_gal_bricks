#!/usr/bin/env python

from spcframe2brick import *

import scipy as sp
import argparse

parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)

parser.add_argument('-sp','--spall', type = str, default = None, required=True,
		help = '<spall.fits> name of the spAll file')

parser.add_argument('-d','--dir', type = str, default = None, required=True, nargs='*',
		help = 'directory(ies) where plate/spcframe files are found')

parser.add_argument('-o','--outdir', type = str, default = None, required=True,
		help = 'output directory')

parser.add_argument('-p','--plates', type = int, default = None, required=False,nargs='*',
		                        help = '[list of plates]')

parser.add_argument('-s','--ssample', type = float, default = None, required=False,
		                        help = '(random) fraction of objects')

parser.add_argument('--regroup', type = int, default = None, required=False,
		                        help = 'regroup objects into files of at moset <regroup> objects')

parser.add_argument('--rand-mjd',action='store_true',default=False,
		help='for each object, choose a random mjd from all the available')

parser.add_argument('--truth-files',type=str,default=None,required=False,nargs='*',
		help='list of truth files (assuming redmonster output format)')

parser.add_argument('--mask',action='store_true',default=False,
		help = 'mask plate, thing_id and other boss info')

args = parser.parse_args()
print "reading spAll from: ",args.spall
idir = args.dir
print "reading plates from: ",idir
odir = args.outdir
plates=args.plates
print "exporting to plates: ",plates
ssample=args.ssample

spa = fits.open(args.spall)
w_0 = spa[1].data.THING_ID > 0
if not ssample is None:
	r=sp.random.uniform(size=len(spa[1].data.THING_ID))
	w_0 = w_0 & (r<ssample)
	print "retained: ",len(spa[1].data.THING_ID[w_0])," of ",len(spa[1].data.THING_ID)

if plates != None:
	w_plates = sp.zeros(len(w_0),dtype=bool)
	for p in plates:
		w_plates = w_plates | (spa[1].data.PLATE == p)

	w_0 = w_0 & w_plates
	

bt1=[0,1,2,3,6,7,8]
w_gal = sp.zeros(len(spa[1].data.PLATE),dtype=bool)
		
for b in bt1:
	w_gal = w_gal | (w_0 & ((spa[1].data.BOSS_TARGET1 & 2**b) > 0))

print "found: ",len(sp.unique(spa[1].data.THING_ID[w_gal]))," gals "

rows=spa[1].data[w_gal]

if args.regroup is None:
	d=brick(rows,idir)
	brick.export(d,odir)
else:
	thids = [row["THING_ID"] for row in rows]
	thids = sp.unique(thids)
	nobjs = len(thids)
	if not args.truth_files is None:
		tt=dict()
		for ftruth in args.truth_files:
			h=fits.open(ftruth)
			for (tid,z) in zip(h[1].data.TARGETID,h[1].data.Z):
				tt[tid]=z

		f=open(odir+'/truth_table_gal.dat',"w")
		for tid in thids:
			f.write(str(tid)+" "+str(tt[tid])+"\n")
		f.close()

	for i in range(nobjs/args.regroup + 1):
		row_thids = []
		for th in thids[i*args.regroup:(i+1)*args.regroup]:
			row_aux = [row for row in rows if row["THING_ID"]==th]
			if args.rand_mjd:
				row_aux = [row_aux[random.randint(0,len(row_aux)-1)]]
			for row in row_aux:
				row_thids.append(row)


		d=brick(row_thids,idir)
		brick.export(d,odir,pext="p"+str(i),mask=args.mask)
